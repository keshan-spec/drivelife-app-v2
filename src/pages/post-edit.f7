<template>
  <div class="page no-toolbar" data-name="post-edit">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="middle">
          <div class="header-logo"><img src="img/logo-dark.png" /></div>
        </div>
        <div class="right">
          <a href="#" class="top-right-action" id="update-post">
            Save
          </a>
        </div>

      </div>
    </div>

    <div class="page-content">
      <div class="block-title">Edit Post</div>

      <div class="list list-strong-ios list-dividers-ios inset-ios">
        <ul>
          <li class="item-content item-input">
            <div class="item-inner">
              <div class="item-input-wrap">
                <input type="hidden" id="edit_post_id" />
                <textarea placeholder="Post content" rows="8" id="post_content"></textarea>
              </div>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>
<script>
  import {
    updatePost
  } from "../js/api/posts.js";
  export default (props, { $, $on, $f7 }) => {
    const { store } = $f7;

    $on('pageInit', async (e, page) => {
      const postId = page.route.params.id;
      const posts = store.getters.myPosts.value;

      if (!postId || postId == -1) {
        return;
      }

      const post = posts.data.find(p => p.id == postId);


      page.$el.find('#edit_post_id').val(postId);
      page.$el.find('#post_content').val(post?.caption || '');
    });

    $on('pageAfterIn', (e, page) => {
      $(document).on('click', '#update-post', async (e) => {
        var view = $f7.views.current;

        const description = $('#post_content').val();
        const postId = $('#edit_post_id').val();

        const data = {
          post_id: postId,
          caption: description
        };

        try {
          $f7.preloader.show();

          const response = await updatePost(data);

          $f7.preloader.hide();

          if (!response || response.error) {
            throw new Error(response.error);
          }

          showToast('Post updated successfully');

          // fine elem with data-post-id="52" and update the .media-post-description .post-caption text
          var postElem = $(`[data-post-id="${postId}"]`).find('.media-post-description');

          const maxDescriptionLength = 200; // Set your character limit here
          const isLongDescription = description.length > maxDescriptionLength;
          const shortDescription = isLongDescription ? description.slice(0, maxDescriptionLength) : description;

          // for each postElem, loop through and update the .post-caption and .full-description hidden input
          postElem.each(function () {
            var postCaption = $(this).find('.post-caption');
            var fullDescription = $(this).find('.full-description');

            postCaption.text(shortDescription);
            fullDescription.val(description);
          });

          store.dispatch('updatePost', {
            post_id: postId,
            caption: description
          });

          view.router.back();
        } catch (error) {
          $f7.notification.create({
            titleRightText: 'now',
            subtitle: 'Oops, something went wrong',
            text: error.message || 'Failed to update post',
          }).open();
          $f7.preloader.hide();
        }
      });
    });

    $on('pageBeforeOut', (e, page) => {
      $(document).off('click', '#update-post');
    });

    const showToast = (text) => {
      $f7.toast.create({
        text: text,
        closeTimeout: 2000,
        position: 'bottom',
      }).open();
    };

    return $render;
  }
</script>