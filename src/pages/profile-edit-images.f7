<template>
  <div class="page no-toolbar" data-name="profile-edit-images">

    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="middle">
          <div class="header-logo"><img src="img/logo-dark.png" /></div>
        </div>
        <div class="right">
          <a href="#" class="top-right-action" id="save-profile-images">
            Save
          </a>
        </div>
      </div>
    </div>

    <div class="page-content profile-edit-images">
      <div class="block-title">Profile Image</div>
      <div class="list list-strong-ios list-dividers-ios inset-ios">
        <div class="custom-file-upload profile" id="fileUpload">
          <input type="file" id="fileuploadInput" name="profile_image" accept="image/*" />
          <label for="fileuploadInput">
          </label>
          <span>
            <i class="icon f7-icons">cloud_upload</i>
            <small>Tap to Upload</small>
          </span>
        </div>
      </div>

      <div class="block-title">Cover Image</div>
      <div class="list list-strong-ios list-dividers-ios inset-ios">
        <div class="custom-file-upload cover" id="fileUpload">
          <input type="file" id="fileuploadInput1" name="cover_image" accept="image/*" />
          <label for="fileuploadInput1">
          </label>
          <span>
            <i class="icon f7-icons">cloud_upload</i>
            <small>Tap to Upload</small>
          </span>
        </div>
      </div>


    </div>


  </div>
</template>
<script>
  import {
    getSessionUser,
  } from "../js/api/auth.js";

  import {
    updateCoverImage,
    updateProfileImage,
  } from "../js/api/profile.js";

  export default (props, { $, $on, $f7 }) => {
    const { store } = $f7;
    var profileImage = null;
    var coverImage = null;

    $on('pageInit', async (e, page) => {
      var view = $f7.views.current;

      const user = await getSessionUser();

      if (!user) {
        view.router.navigate('/login');
        return;
      }

      // If a cover photo exists, use it as the background image of the upload label
      if (user.cover_image) {
        page.$el.find('input[name="cover_image"]').closest('.custom-file-upload').find('label').css('background-image', `url('${user.cover_image}')`);
        page.$el.find('input[name="cover_image"]').closest('.custom-file-upload').find('label').css('background-size', 'cover');
      }

      if (user.profile_image) {
        page.$el.find('input[name="profile_image"]').closest('.custom-file-upload').find('label').css('background-image', `url('${user.profile_image}')`);
        page.$el.find('input[name="profile_image"]').closest('.custom-file-upload').find('label').css('background-size', 'contain');
        page.$el.find('input[name="profile_image"]').closest('.custom-file-upload').find('label').css('background-position', 'center');
        page.$el.find('input[name="profile_image"]').closest('.custom-file-upload').find('label').css('background-repeat', 'no-repeat');
      }
    });


    $on('pageBeforeIn', (e, page) => {
      profileImage = null;
      coverImage = null;

      $(document).on('change', 'input[name="cover_image"]', function (e) {
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = function (event) {
          coverImage = event.target.result;

          $('.custom-file-upload.cover')
            .find('label')
            .css('background-image', `url('${event.target.result}')`)
            .css('background-size', 'cover');
        };

        if (file) {
          reader.readAsDataURL(file);
        }
      });

      $(document).on('change', 'input[name="profile_image"]', function (e) {
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = function (event) {
          profileImage = event.target.result;

          $('.custom-file-upload.profile')
            .find('label')
            .css('background-image', `url('${event.target.result}')`)
            .css('background-size', 'cover');
        };

        if (file) {
          reader.readAsDataURL(file);
        }
      });

      $(document).on('click', '#save-profile-images', async function () {
        var view = $f7.views.current;

        const cover_image = $('input[name="cover_image"]').prop('files')[0];
        const profile_image = $('input[name="profile_image"]').prop('files')[0];

        let coverBase64 = null;
        let profileBase64 = null;

        if (cover_image) {
          // // Wrap the FileReader in a Promise to wait for it to complete
          // coverBase64 = await new Promise((resolve, reject) => {
          //   const reader = new FileReader();
          //   reader.readAsDataURL(cover_image);

          //   reader.onload = () => resolve(reader.result);
          //   reader.onerror = () => reject(new Error('Failed to read image as base64'));
          // });
          coverBase64 = coverImage;
        }

        if (profile_image) {
          // // Wrap the FileReader in a Promise to wait for it to complete
          // profileBase64 = await new Promise((resolve, reject) => {
          //   const reader = new FileReader();
          //   reader.readAsDataURL(profile_image);

          //   reader.onload = () => resolve(reader.result);
          //   reader.onerror = () => reject(new Error('Failed to read image as base64'));
          // });
          profileBase64 = profileImage;
        }

        if (!coverBase64 && !profileBase64) {
          return;
        }

        try {
          $f7.preloader.show();

          let promises = [];

          if (profileBase64) {
            promises.push(updateProfileImage(profileBase64));
          }

          if (coverBase64) {
            promises.push(updateCoverImage(coverBase64));
          }

          const responses = await Promise.all(promises);

          $f7.preloader.hide();

          if (responses.every(response => response && response.success)) {
            showToast('Images updated successfully', 'Success');
            view.router.navigate('/profile/');

            store.dispatch('updateUserDetails');
            return;
          }

          if (responses.some(response => response && !response.success)) {
            throw new Error('Failed to update images');
          }
        } catch (error) {
          $f7.preloader.hide();

          $f7.notification.create({
            titleRightText: 'now',
            subtitle: 'Oops, something went wrong',
            text: error.message || 'Failed to update images',
          }).open();
        }
      });
    });

    $on('pageBeforeOut', (e, page) => {
      $(document).off('click', '#save-profile-images');
      $(document).off('change', 'input[name="cover_image"]');
      $(document).off('change', 'input[name="profile_image"]');
    });

    const showToast = (text, type = 'error') => {
      $f7.toast.create({
        text,
        position: 'bottom',
        closeTimeout: 2000,
        cssClass: type === 'error' ? 'toast-error' : 'toast-success',
      }).open();
    };

    return $render;
  }
</script>