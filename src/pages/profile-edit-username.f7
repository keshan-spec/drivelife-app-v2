<template>
  <div class="page no-toolbar" data-name="profile-edit-username">

    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="middle">
          <div class="header-logo"><img src="img/logo-dark.png" /></div>
        </div>
        <div class="right">
          <a href="#" class="top-right-action" id="save-username">
            Save
          </a>
        </div>

      </div>
    </div>

    <div class="page-content">
      <div class="block-title">Change Username
        <div class="item-input-info change-username-info">Your username can be changed every 30 days</div>
      </div>

      <div class="list list-strong-ios list-dividers-ios inset-ios">
        <form>
          <ul>
            <li class="item-content item-input">
              <div class="item-inner profile-edit-view">
                <div class="item-title item-label">Username</div>
                <div class="item-input-wrap">
                  <input type="text" name="username" placeholder="Enter desired Username" id="lowercaseInput" />
                  <span class="input-clear-button"></span>
                </div>
              </div>
            </li>
          </ul>
        </form>
        <br />
        <div class="item-input-info change-username-info" id="username-editable"></div>
      </div>
    </div>
  </div>
</template>
<script>
  import {
    getSessionUser,
    updateUsername
  } from "../js/api/auth.js";

  export default (props, { $, $on, $f7 }) => {
    const { store } = $f7;

    $on('pageInit', async (e, page) => {
      page.$el.find('#lowercaseInput').on('input', function (event) {
        this.value = this.value.toLowerCase();
      });

      const user = await getSessionUser();
      if (!user || !user.id) {
        $f7.views.current.router.navigate('/login');
        return;
      }

      // Example of how to fill in the form fields with the provided data
      page.$el.find('.profile-edit-view input[name="username"]').val(user.username || '');

      if (user.can_update_username) {
        // $('#username-editable').remove();
        page.$el.find('#username-editable').remove();
      } else {
        page.$el.find('.profile-edit-view input[name="username"]').attr('disabled', 'disabled');
        page.$el.find('#username-editable').text(`You can change your username in ${user.next_update_username} days`);
      }
    });

    $on('pageBeforeIn', (e, page) => {
      $(document).on('click', '#save-username', async function () {
        var view = $f7.views.current;

        const user = await getSessionUser();

        if (!user.can_update_username) {
          return;
        }

        const username = $('.profile-edit-view input[name="username"]').val();

        if (username === '') {
          showToast('Please enter a username', 'Error');
          return;
        }

        // username can only have letters, numbers, and underscores
        var usernamePattern = /^[a-zA-Z0-9_]+$/;
        if (!usernamePattern.test(username)) {
          showToast('Username can only contain letters, numbers, and underscores');
          return;
        }

        // username must be at least 3 characters long
        if (username.length < 3) {
          showToast('Username must be at least 3 characters long');
          return;
        }

        if (username === user.username) {
          $f7.preloader.show();

          setTimeout(() => {
            $f7.preloader.hide();
            view.router.navigate('/profile/');
          }, 1000);
          return;
        }

        try {
          $f7.preloader.show();

          const response = await updateUsername(username);

          $f7.preloader.hide();

          if (response && response.success) {
            showToast('Username updated successfully', 'Success');
            view.router.navigate('/profile/');

            store.dispatch('updateUserDetails');
          } else {
            throw new Error(response.message);
          }
        } catch (error) {
          $f7.preloader.hide();
          $f7.notification.create({
            titleRightText: 'now',
            subtitle: 'Oops, something went wrong',
            text: error.message || 'Failed to update username',
          }).open();
        }


      });
    });

    $on('pageBeforeOut', (e, page) => {
      $(document).off('click', '#save-username');
    });

    const showToast = (text, type = 'default') => {
      $f7.toast.create({
        text: text,
        position: 'bottom',
        closeTimeout: 2000,
        cssClass: `toast-${type}`,
      }).open();
    };

    return $render;
  }
</script>