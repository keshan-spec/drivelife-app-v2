<template>
  <div class="page" data-name="profile-garage-vehicle-view">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="middle">
          <div class="header-logo"><img src="img/logo-dark.png" /></div>
        </div>
        <div class="right">
          <a href="#" class="link icon-only open-qr-modal">
            <i class="icon f7-icons">qrcode</i>
          </a>
          <a href="/notifications/" class="link icon-only">
            <div class="notification-count"></div>
            <i class="icon f7-icons">bell</i>
          </a>
        </div>

      </div>
    </div>

    <div class="page-content profile-landing-page infinite-scroll-content" data-infinite-distance="50">
      <div class="loading-fullscreen garage">
        <div class="preloader preloader-central">
          <span class="preloader-inner"><span class="preloader-inner-line"></span><span
              class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
              class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
              class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
              class="preloader-inner-line"></span>
          </span>
        </div>
      </div>

      <div class="vehicle-profile-background" style="background-color:gray;">
        <a class="vehicle-profile-image" href="/profile/" style="background-color:gray;"></a>
      </div>

      <div class="profile-garage-intro text-center">
        <h1>
          <div class="skeleton-block" style="width: 100px"></div>
        </h1>
        <p class="garage-owned-information">
        <div class="skeleton-block" style="width: 100px"></div>
        </p>
        <p class="garage-vehicle-description">
        <div class="skeleton-block" style="width: 100px"></div>
        </p>

        <div class="profile-links-edit garage d-flex">
          <div class="profile-link dark-bg garage-add-post">Add Post</div>
        </div>
      </div>

      <div class="profile-lower">
        <div class="profile-tabs garage-view">
          <a href="#tab-1" class="tab-link tab-link-active" id="garage-posts">Posts</a>
          <a href="#tab-2" class="tab-link" id="garage-tags">Tags</a>
        </div>

        <swiper-container class="tabs">
          <swiper-slide id="tab-1" class="tab">
            <div class="swiper-inner-container">
              <div class="profile-grid" id="garage-posts-tab">
              </div>

              <!-- Preloader for infinite scroll -->
              <div class="infinite-scroll-preloader garage-posts-tab">
                <div class="preloader"></div>
              </div>
            </div>
          </swiper-slide>
          <swiper-slide id="tab-2" class="tab">
            <div class="swiper-inner-container">
              <div class="profile-grid" id="garage-tags-tab">
              </div>

              <!-- Preloader for infinite scroll -->
              <div class="infinite-scroll-preloader garage-tags-tab">
                <div class="preloader"></div>
              </div>
            </div>
          </swiper-slide>
        </swiper-container>
      </div>
    </div>
  </div>
</template>
<script>
  import {
    getSessionUser,
  } from "../js/api/auth.js";

  import {
    getGargeById,
  } from "../js/api/garage.js";

  export default (props, { $, $on, $f7 }) => {
    const { store } = $f7;

    var pathStore = store.getters.getPathData;

    $on('pageInit', (e, page) => {
      page.$el.find('.garage-add-post').on('click', async function () {
        const garageId = $(this).attr('data-garage-id');

        if (!garageId) {
          $f7.dialog.alert('Garage not found');
          return;
        }

        const user = await getSessionUser();

        if (user && user.id) {
          store.dispatch('setCreatePostAssociations', {
            association_id: garageId,
            association_type: 'garage'
          });
          // $f7.views.current.router.navigate(`/post-add/?garage_id=${garageId}`);
        } else {
          $f7.dialog.alert('You must be logged in to add a post');
        }
      });
    });

    $on('pageBeforeIn', async (e, page) => {
      var garageId = e.detail.route.params.id;

      if (!garageId) {
        $f7.dialog.alert('Garage not found');
        $f7.views.main.router.back();
        return;
      }

      if (garageId == -1) {
        return;
      }

      let cachedData = null;
      try {
        if (pathStore && pathStore.value[`/garage/${garageId}`]) {
          cachedData = pathStore.value[`/garage/${garageId}`];
        }
      } catch (error) {
        console.error('Error fetching cached data:', error);
      }

      if (cachedData) {
        $('.loading-fullscreen.garage').hide();
        store.dispatch('setGarageViewPosts', garageId, 1);
        store.dispatch('setGarageViewTags', garageId, 1);
        updateProfilePage(cachedData);
        return;
      }

      $('.loading-fullscreen.garage').show();

      const garage = await getGargeById(garageId);
      if (!garage) {
        $('.loading-fullscreen').hide();

        $f7.dialog.alert('Garage not found');
        $f7.views.main.router.back();
        return;
      }

      $('.loading-fullscreen.garage').hide();

      // Assuming `path` is a dynamic path like '/garage/2'
      store.dispatch('setPathData', {
        path: `/garage/${garageId}`,
        data: garage,
      });

      // Call the function to update the page
      updateProfilePage(garage);
      store.dispatch('setGarageViewPosts', garageId, 1);
      store.dispatch('setGarageViewTags', garageId, 1);
    });

    // Function to update the HTML with the data
    async function updateProfilePage(data) {
      const user = await getSessionUser();

      // Update the cover photo
      const coverPhotoElement = document.querySelector('.vehicle-profile-background');
      if (coverPhotoElement) {
        coverPhotoElement.style.backgroundImage = `url('${data.cover_photo}')`;
      }

      // Update the profile image
      const profileImageElement = document.querySelector('.vehicle-profile-image');
      if (profileImageElement) {
        profileImageElement.style.backgroundImage = `url('${data.owner.profile_image || 'img/profile-placeholder.jpg'}')`;

        let profile_link = `/profile-view/${data.owner_id}`;

        if (user.id == data.owner_id) {
          profile_link = '/profile/';
          // add class view-profile
          profileImageElement.classList.add('view-profile');
        }

        profileImageElement.setAttribute('href', profile_link);
      }

      // Update the vehicle make and model
      const vehicleTitleElement = document.querySelector('.profile-garage-intro h1');
      if (vehicleTitleElement) {
        vehicleTitleElement.textContent = `${data.make} ${data.model}`;
      }


      const profileLinks = $('.profile-links-edit.garage');
      if (profileLinks) {
        const editLink = `<a class="profile-link" href="/profile-garage-vehicle-edit/${data.id}">Edit Vehicle</a>`;
        const user = await getSessionUser();

        if (data.owner_id == user.id) {
          // check if the edit link is already present
          if (!profileLinks.find('.profile-link[href="/profile-garage-vehicle-edit/' + data.id + '"]').length) {
            profileLinks.prepend(editLink);
          }
        }


        if (data.owner_id != user.id) {
          if (data.allow_tagging != "1") {
            $('.garage-add-post').hide();
          }

          $('.garage-add-post').text('Tag this vehicle');
        }


        $('.garage-add-post').attr('data-garage-id', data.id);
      }

      // Update the ownership information
      const ownershipInfoElement = document.querySelector('.garage-owned-information');
      if (ownershipInfoElement) {
        const ownedUntilText = data.owned_until ? ` - ${data.owned_until}` : ' - Present';
        ownershipInfoElement.textContent = `Owned from ${data.owned_since}${ownedUntilText}`;
      }

      // Update the vehicle description
      const vehicleDescriptionElement = document.querySelector('.garage-vehicle-description');
      if (vehicleDescriptionElement) {
        vehicleDescriptionElement.textContent = data.short_description;
      }
    }

    return $render;
  }
</script>