<template>
  <div class="page" data-name="signup-step5">
    <div class="navbar">
      <div class="navbar-inner">
        <div class="left">
          <a class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="right">
        </div>
      </div>
    </div>
    <div class="page-content">

      <div class="login-form">
        <div class="section">
          <h1>Your Profile</h1>
          <h4>Set your profile images</h4>
        </div>

        <div class="block-title">Profile Image</div>
        <div class="list list-strong-ios list-dividers-ios inset-ios">
          <div class="custom-file-upload profile" id="fileUpload">
            <input type="file" id="fileuploadInput" name="profile_image" accept="image/*" />
            <label for="fileuploadInput">
            </label>
            <span>
              <i class="icon f7-icons">cloud_upload</i>
              <small>Tap to Upload</small>
            </span>
          </div>
        </div>

        <div class="block-title">Cover Image</div>
        <div class="list list-strong-ios list-dividers-ios inset-ios">
          <div class="custom-file-upload cover" id="fileUpload">
            <input type="file" id="fileuploadInput1" name="cover_image" accept="image/*" />
            <label for="fileuploadInput1">
            </label>
            <span>
              <i class="icon f7-icons">cloud_upload</i>
              <small>Tap to Upload</small>
            </span>
          </div>
        </div>

        <div class="login-buttons">
          <button type="submit" class="button button-large button-fill margin-bottom" id="update-profile-images-signup">
            Next
          </button>
          <a href="/signup-complete/" class="button button-large button-fill margin-bottom button-grey">Skip</a>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
  import {
    updateCoverImage,
    updateProfileImage,
  } from "../js/api/profile.js";

  export default (props, { $, $on, $f7 }) => {
    const { store } = $f7;

    $on('pageBeforeIn', (e, page) => {
      $(document).on('change', 'input[name="cover_image"]', function (e) {
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = function (event) {
          $('.custom-file-upload.cover')
            .find('label')
            .css('background-image', `url('${event.target.result}')`)
            .css('background-size', 'cover');
        };

        if (file) {
          reader.readAsDataURL(file);
        }
      });

      $(document).on('change', 'input[name="profile_image"]', function (e) {
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = function (event) {
          $('.custom-file-upload.profile')
            .find('label')
            .css('background-image', `url('${event.target.result}')`)
            .css('background-size', 'cover');
        };

        if (file) {
          reader.readAsDataURL(file);
        }
      });

      $(document).on('click', '#update-profile-images-signup', async function () {
        const registerData = store.getters.getRegisterData.value;

        if (!registerData || !registerData.user_id || !registerData.email || !registerData.password) {
          $f7.dialog.alert('Oops, something went wrong. Please try again.');
          return;
        }

        var view = $f7.views.current;

        const cover_image = $('input[name="cover_image"]').prop('files')[0];
        const profile_image = $('input[name="profile_image"]').prop('files')[0];

        let coverBase64 = null;
        let profileBase64 = null;

        if (cover_image) {
          // Wrap the FileReader in a Promise to wait for it to complete
          coverBase64 = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(cover_image);

            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('Failed to read image as base64'));
          });
        }

        if (profile_image) {
          // Wrap the FileReader in a Promise to wait for it to complete
          profileBase64 = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(profile_image);

            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('Failed to read image as base64'));
          });
        }

        if (!coverBase64 && !profileBase64) {
          showToast('Please select an image to upload', 'error');
          return;
        }

        try {
          $f7.preloader.show();

          let promises = [];

          if (profileBase64) {
            promises.push(updateProfileImage(profileBase64, registerData.user_id));
          }

          if (coverBase64) {
            promises.push(updateCoverImage(coverBase64, registerData.user_id));
          }

          const responses = await Promise.all(promises);

          $f7.preloader.hide();

          if (responses.every(response => response && response.success)) {
            showToast('Images updated successfully', 'Success');
            view.router.navigate('/signup-complete/');
            return;
          }

          if (responses.some(response => response && !response.success)) {
            throw new Error('Failed to update images');
          }
        } catch (error) {
          $f7.preloader.hide();

          $f7.notification.create({
            titleRightText: 'now',
            subtitle: 'Oops, something went wrong',
            text: error.message || 'Failed to update images',
          }).open();
        }
      });
    });

    $on('pageBeforeOut', (e, page) => {
      $(document).off('click', '#update-profile-images-signup');
      $(document).off('change', 'input[name="cover_image"]');
      $(document).off('change', 'input[name="profile_image"]');
    });

    const showToast = (text, type = 'error') => {
      $f7.toast.create({
        text,
        position: 'bottom',
        closeTimeout: 2000,
        cssClass: type === 'error' ? 'toast-error' : 'toast-success',
      }).open();
    };

    return $render;
  }
</script>