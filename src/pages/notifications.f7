<template>
    <div class="page" data-name="notifications">
        <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner">
                <div class="left">
                    <a class="link back">
                        <i class="icon icon-back"></i>
                    </a>
                </div>
                <div class="middle">
                    <div class="header-logo"><img src="img/logo-dark.png" /></div>
                </div>

            </div>
        </div>

        <!-- Page content-->
        <div class="page-content notification-page ptr-content ptr-watch-scrollable" data-infinite-distance="50"
            data-ptr-distance="120">
            <div class="ptr-preloader">
                <div class="preloader"></div>
                <div class="ptr-arrow"></div>
            </div>

            <div class="notification-wrap">
                <div class="preloader preloader-central preloader-notif">
                    <span class="preloader-inner"><span class="preloader-inner-line"></span><span
                            class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
                            class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
                            class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span
                            class="preloader-inner-line"></span>
                    </span>
                </div>

                <div class="no-notifications">
                    <p class="text-center">No notifications</p>
                </div>

                <div class="">
                    <div class="app-notification-title" data-title="Recent" data-id="recent"></div>
                    <div class="notification-list" id="recent">

                    </div>
                </div>

                <div class="">
                    <div class="app-notification-title" data-title="Last Week" data-id="last-week"></div>
                    <div class="notification-list" id="this-week">
                    </div>
                </div>

                <div class="">
                    <div class="app-notification-title" data-title="Last 30 days" data-id="last-30"></div>
                    <div class="notification-list" id="last-30-days">
                    </div>
                </div>

                <div class="load-more-notifications btn btn-primary hidden" data-page="1" data-total-pages="NaN">Load
                    more
                </div>
            </div>
        </div>
        <!-- Page content-->
    </div>
</template>
<script>
    import {
        approvePostTag,
        maybeFollowUser,
        removeTagFromPost
    } from "../js/api/profile.js";

    import {
        getSessionUser
    } from "../js/api/auth.js";

    import {
        formatPostDate,
    } from "../js/utils.js";

    export default (props, { $, $on, $f7 }) => {
        const { store } = $f7;

        const userStore = store.getters.user;
        const notificationsStore = store.getters.getNotifications;
        const notificationCountStore = store.getters.getNotifCount;

        let notificationInterval;

        userStore.onUpdated((data) => {
            if (data && data.id) {
                store.dispatch('fetchNotifications', {
                    load_more: false,
                    refreshed: true
                });

                store.dispatch('notificationCount');

                // fetch notifications every 1 min
                // create an interval to fetch notifications every 1 min
                if (!notificationInterval) {
                    notificationInterval = setInterval(() => {
                        store.dispatch('notificationCount');
                    }, 60000 * 2);
                } else {
                    clearInterval(notificationInterval);
                    notificationInterval = setInterval(() => {
                        store.dispatch('notificationCount');
                    }, 60000 * 2); // 2 mins
                }
            }

            if (!data || !data.id) {
                clearInterval(notificationInterval);
            }


        });

        notificationsStore.onUpdated(async (data) => {
            $('.preloader-notif').hide();

            if (data && data.success) {
                $('.no-notifications').hide();
                renderNotifications($f7.$el, data);
            } else {
                $('.no-notifications').show();
            }
        });

        // on ptr
        $on('ptr:refresh', async (e) => {
            try {
                await store.dispatch('notificationCount');
                await store.dispatch('fetchNotifications', {
                    load_more: false,
                    refreshed: true
                });
            } catch (error) {
                console.log(error);
            }

            e.detail();
        });

        $on('pageInit', (e, page) => {
            // load more notifications
            page.$el.find('.load-more-notifications').on('click', function () {
                store.dispatch('fetchNotifications', {
                    load_more: true
                });
            });
        });

        $on('pageBeforeIn', (e, page) => {
            // load more notifications
            store.dispatch('fetchNotifications', {
                load_more: false,
                refreshed: true
            });

            $(document).on('click', '.toggle-follow', async function (e) {
                const userId = e.target.dataset.userId;
                const isFollowing = e.target.dataset.isFollowing === 'true';

                if (!isFollowing) {
                    // hide the button
                    e.target.style.display = 'none';
                }

                // update the button text
                e.target.textContent = isFollowing ? 'Follow' : 'Unfollow';
                e.target.dataset.isFollowing = !isFollowing;

                await maybeFollowUser(userId);
                store.dispatch('updateUserDetails');
            });

            $(document).on('click', '.approve-tag', async function (e) {
                e.preventDefault();

                const tagId = e.target.dataset.tagId;
                const tagTyype = e.target.dataset.tagType;

                $f7.preloader.show();
                const response = await approvePostTag(tagId, tagTyype);

                $f7.preloader.hide();

                if (response.success) {
                    // remove the buttons
                    e.target.parentElement.innerHTML = '';

                    showToast('Tag has been approved');
                } else {
                    showToast(response.message || 'Failed to approve tag');
                }
            });

            $(document).on('click', '.decline-tag', async function (e) {
                e.preventDefault();

                const tagId = e.target.dataset.tagId;

                $f7.dialog.confirm('Are you sure you want to decline this tag?', 'Decline Tag', async function () {
                    try {
                        $f7.preloader.show();

                        const response = await removeTagFromPost(tagId);

                        $f7.preloader.hide();

                        if (response.success) {
                            // refetch notifications
                            store.dispatch('fetchNotifications', {
                                load_more: false
                            });
                            showToast('Tag has been declined');
                        } else {
                            showToast(response.message || 'Failed to decline tag');
                        }
                    } catch (error) {
                        $f7.preloader.hide();
                        showToast('Failed to decline tag');
                    }
                });
            });
        });

        $on('pageBeforeOut', (e, page) => {
            const data = notificationsStore.value;

            if (!data || !data.success) {
                return;
            }

            // a list if all unread notification ids
            const unreadNotificationIds = [
                ...data.data.recent,
                ...data.data.last_week,
                ...data.data.last_30_days,
            ].filter((item) => item.is_read === "0").map((item) => item._id);

            if (unreadNotificationIds.length > 0) {
                store.dispatch('markNotificationsAsRead', unreadNotificationIds);
            }

            document.querySelectorAll('.notification-count').forEach((el) => {
                el.innerHTML = data;
                el.style.display = data > 0 ? 'flex' : 'none';
            });

            // remove event listeners
            $(document).off('click', '.toggle-follow');
            $(document).off('click', '.approve-tag');
            $(document).off('click', '.decline-tag');
        });

        async function renderNotifications(dom, data) {
            if (!data || !data.success) {
                return;
            }

            const notifications = data.data;

            const recentContainer = dom.find('#recent')[0];
            const thisWeekContainer = dom.find('#this-week')[0];
            const last30DaysContainer = dom.find('#last-30-days')[0];

            if (data.refreshed) {
                if (recentContainer) {
                    recentContainer.innerHTML = '';
                }

                if (thisWeekContainer) {
                    thisWeekContainer.innerHTML = '';
                }

                if (last30DaysContainer) {
                    last30DaysContainer.innerHTML = '';
                }
            }

            var user = await getSessionUser();

            dom.find('.app-notification-title').each(function (elem) {
                if (elem.getAttribute('data-id') === 'last-30') {
                    if (notifications.last_30_days.length > 0) {
                        elem.innerHTML = elem.getAttribute('data-title');
                    } else {
                        elem.innerHTML = '';
                    }
                    return;
                }
                elem.innerHTML = elem.getAttribute('data-title');
            });

            if (!notifications.recent.length && !notifications.is_paginated) {
                recentContainer.innerHTML = '<p class="text-center">No recent notifications</p>';
            }

            if (!notifications.last_week.length && !notifications.has_more_notifications) {
                thisWeekContainer.innerHTML = '<p class="text-center">No notifications from this week</p>';
            }

            notifications.last_30_days.forEach(notification => {
                const notificationItem = createNotificationItem(notification, user);
                last30DaysContainer.appendChild(notificationItem);
            });

            notifications.recent.forEach(notification => {
                const notificationItem = createNotificationItem(notification, user);
                recentContainer.appendChild(notificationItem);
            });

            notifications.last_week.forEach(notification => {
                const notificationItem = createNotificationItem(notification, user);
                thisWeekContainer.appendChild(notificationItem);
            });

            // add a load more button at the end
            if ((notifications.recent.length >= 0 || notifications.last_week.length >= 0) && (notifications.has_more_notifications)) {
                $('.load-more-notifications').removeClass('hidden');
            } else {
                $('.load-more-notifications').addClass('hidden');
            }
        }

        function createNotificationItem(notification, user) {
            const isFollow = notification.type === 'follow' ? true : false;
            const container = document.createElement(isFollow ? 'div' : 'a');

            if (!isFollow) {
                container.href = `/post-view/${notification.entity.entity_id}`;
            }

            let isReadClass = notification.is_read == "0" ? "unread-notif" : "";

            container.className = `notification-item ${isReadClass}`;
            container.dataset.notificationId = notification._id;

            // Profile image and notification content container
            const leftContainer = document.createElement('div');
            leftContainer.className = 'notification-left';

            const imageDiv = document.createElement('a');
            imageDiv.className = 'image-square image-rounded';
            imageDiv.style.backgroundImage = `url('${notification.entity.initiator_data.profile_image || 'img/profile-placeholder.jpg'}')`;
            imageDiv.href = `/profile-view/${notification.entity.user_id}`;

            const infoDiv = document.createElement('div');
            infoDiv.className = 'notification-info';

            let content = '';

            // Conditional content rendering based on the type
            if (notification.type === 'like') {
                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> liked your ${notification.entity.entity_type}
                ${notification.entity.entity_data.comment ? `<span class="inline font-semibold text-black">: "${notification.entity.entity_data.comment}"</span>` : ''}
                <span class=""></span>
            </div>
        `;
            } else if (notification.type === 'comment') {
                const eclipseComment = notification.entity.entity_data.comment.length > 50 ? notification.entity.entity_data.comment.substring(0, 50) + '...' : notification.entity.entity_data.comment;

                container.href = `/post-view/${notification.entity.entity_data.post_id}?commentId=${notification.entity.entity_id}`;

                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> commented on your post: 
                <span class="font-semibold text-black">"${eclipseComment}"</span>
                <span class="${isReadClass}"></span>
            </div>
        `;
            } else if (notification.type === 'follow') {
                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> followed you
                <span class="${isReadClass}"></span>
            </div>
        `;
            } else if (notification.type === 'mention') {
                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> mentioned you in a ${notification.entity.entity_type}
                ${notification.entity.entity_data.comment ? `<span class="block font-semibold text-black">"${notification.entity.entity_data.comment}"</span>` : ''}
                <span class="${isReadClass}"></span>
            </div>
        `;
            } else if (notification.type === 'post') {
                // <a href="/profile-garage-vehicle-view/${notification.entity.entity_data?.garage?.id}">
                //     <strong>${notification.entity.entity_data?.garage?.make || ''} ${notification.entity.entity_data?.garage?.model || ''}</strong>
                // </a>
                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> has tagged ${notification.entity.entity_type === 'car' ? "your car" : "you"} in a post
                <span class="${isReadClass}"></span>
            </div>
            ${(notification.entity.entity_type === 'car' && !notification.entity.entity_data.tag_approved) ? `<div class="notification-text tag-actions">
                <div class="btn btn-primary btn-sm approve-tag" data-tag-id="${notification.entity.entity_data.tag_id}" data-tag-type="${notification.entity.entity_type}">Approve</div>
                <div class="btn btn-secondary btn-sm decline-tag" data-tag-id="${notification.entity.entity_data.tag_id}" data-tag-type="${notification.entity.entity_type}">Decline</div>
                </div>` : ''}
        `;

                container.href = `#`;
            } else if (notification.type === 'tag') {
                content = `
            <div class="notification-text">
                <a href="/profile-view/${notification.entity.user_id}"><strong>${notification.entity.initiator_data.display_name}</strong></a> ${notification.entity.entity_type === 'car' ? "tagged your car in a post" : "tagged you in a post"}
                <span class="${isReadClass}"></span>
            </div>
            ${(!notification.entity.entity_data.tag_approved && notification.entity.entity_data.tag_id) ? `<div class="notification-text tag-actions">
                <div class="btn btn-primary btn-sm approve-tag" data-tag-id="${notification.entity.entity_data.tag_id}" data-tag-type="${notification.entity.entity_type}">Approve</div>
                <div class="btn btn-secondary btn-sm decline-tag" data-tag-id="${notification.entity.entity_data.tag_id}" data-tag-type="${notification.entity.entity_type}">Decline</div>
                </div>` : ''}
        `;

                container.href = `#`;
            }

            // Add time ago
            const timeSpan = document.createElement('span');
            timeSpan.className = 'notification-time';
            timeSpan.textContent = formatPostDate(notification.date);

            infoDiv.innerHTML = `${content} ${timeSpan.outerHTML}`;

            // Adding profile image and content to the left container
            leftContainer.appendChild(imageDiv);
            leftContainer.appendChild(infoDiv);

            // Append left container to the main container
            container.appendChild(leftContainer);

            if (notification.type === 'follow') {
                const isFollowing = user.following.includes(notification.entity.user_id);
                if (!isFollowing) {
                    let followBtn = `<div class="btn btn-primary btn-sm toggle-follow" data-is-following="${isFollowing}" data-user-id="${notification.entity.user_id}">
                Follow
            </div>`;
                    container.innerHTML += followBtn;
                }
            } else {
                const rightContainer = document.createElement('a');
                rightContainer.className = 'notification-left';
                let path;

                if (notification.entity.entity_type === 'car') {
                    path = 'post-view';
                    rightContainer.href = `/${path}/${notification.entity.entity_data.post_id}`;

                } else if (notification.entity.entity_type === 'post' || notification.entity.entity_type === 'tag') {
                    path = 'post-view';
                    rightContainer.href = `/${path}/${notification.entity.entity_id}`;

                } else if (notification.entity.entity_type === 'comment') {
                    path = 'post-view';
                    rightContainer.href = `/${path}/${notification.entity.entity_data.post_id}?commentId=${notification.entity.entity_id}`;
                } else {
                    path = 'profile-view';
                    rightContainer.href = `/${path}/${notification.entity.user_id}`;
                }

                if (notification.type === 'tag') {
                    path = 'post-view';
                    rightContainer.href = `/${path}/${notification.entity.entity_id}`;
                }


                const imageDiv = document.createElement('div');
                imageDiv.className = 'image-square image-rounded';
                imageDiv.style.backgroundImage = `url('${notification.entity.entity_data.media}')`;
                imageDiv.style.backgroundSize = 'cover';
                imageDiv.style.backgroundPosition = 'center';
                imageDiv.style.backgroundColor = '#f1f1f1';

                rightContainer.appendChild(imageDiv);
                container.appendChild(rightContainer);
            }

            return container;
        }

        return $render;
    }
</script>